package com.biblioteca.prestamos_service.service;

import com.biblioteca.prestamos_service.dto.PrestamoRequest;
import com.biblioteca.prestamos_service.dto.PrestamoResponse;
import com.biblioteca.prestamos_service.entity.Prestamo;
import com.biblioteca.prestamos_service.exception.ResourceNotFoundException;
import com.biblioteca.prestamos_service.repository.PrestamoRepository;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import com.biblioteca.prestamos_service.dto.ColeccionResponse;


@Service
public class PrestamoService {

    private final PrestamoRepository prestamoRepository;
    private final RestTemplate restTemplate;

    public PrestamoService(PrestamoRepository prestamoRepository, RestTemplate restTemplate) {
        this.prestamoRepository = prestamoRepository;
        this.restTemplate = restTemplate;
    }

    // üîπ Crear un nuevo pr√©stamo y reducir el stock en colecciones-service
    public PrestamoResponse crearPrestamo(PrestamoRequest request, String token) {
        try {
            System.out.println("üìå Recibido usuarioId (antes de guardar): " + request.getUsuarioId());

            if (request.getUsuarioId() == null || request.getColeccionId() == null) {
                throw new IllegalArgumentException("Usuario ID y Colecci√≥n ID son obligatorios");
            }

            // ‚úÖ Guardamos el usuarioId tal como lo env√≠a el frontend (sin modificarlo)
            Prestamo prestamo = new Prestamo();
            prestamo.setUsuarioId(request.getUsuarioId().trim()); // üîπ Asegurar que no haya espacios
            prestamo.setColeccionId(request.getColeccionId());
            prestamo.setFechaPrestamo(LocalDate.now());
            prestamo.setDevuelto(false);

            // üîπ Guardar en la base de datos
            prestamoRepository.save(prestamo);

            // üîπ Reducir stock en colecciones-service
            reducirStock(request.getColeccionId(), token);

            System.out.println("‚úÖ Pr√©stamo guardado con usuarioId: " + prestamo.getUsuarioId());

            return toResponse(prestamo, token);
        } catch (Exception e) {
            System.err.println("‚ùå Error en crearPrestamo: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }


    // üîπ Llamada a colecciones-service para reducir stock con autenticaci√≥n
    private void reducirStock(Long coleccionId, String token) {
        String url = "http://localhost:9092/colecciones/admin/reducir-stock/" + coleccionId;

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", token); // ‚úÖ Agregar token en la cabecera
        headers.set("Content-Type", "application/json");

        HttpEntity<Void> requestEntity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.PUT, requestEntity, String.class);

        System.out.println("üìå Respuesta reducirStock: " + response.getStatusCode());
    }

    // üîπ Obtener el historial de pr√©stamos de un usuario con el formato correcto
    public List<PrestamoResponse> obtenerPrestamosPorUsuario(String usuarioId, String token) { // ‚úÖ Agregar el token
        System.out.println("üìå Buscando pr√©stamos para usuarioId: " + usuarioId);

        List<Prestamo> prestamos = prestamoRepository.findByUsuarioId(usuarioId);

        if (prestamos.isEmpty()) {
            System.out.println("‚ùå No se encontraron pr√©stamos para usuarioId: " + usuarioId);
        } else {
            System.out.println("‚úÖ Pr√©stamos encontrados para usuarioId: " + usuarioId);
        }

        return prestamos.stream()
                .map(prestamo -> toResponse(prestamo, token)) // ‚úÖ Pasar el token a `toResponse()`
                .collect(Collectors.toList());
    }




    // üîπ Obtener todos los pr√©stamos (solo para administradores)
    public List<PrestamoResponse> obtenerTodosLosPrestamos(String token) { // ‚úÖ Agregar el token
        return prestamoRepository.findAll()
                .stream()
                .map(prestamo -> toResponse(prestamo, token)) // ‚úÖ Pasar el token
                .collect(Collectors.toList());
    }


    // üîπ Renovar un pr√©stamo (simulando una extensi√≥n del mismo en 7 d√≠as)
    public void renovarPrestamo(Long id) {
        Prestamo prestamo = prestamoRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Pr√©stamo no encontrado con ID: " + id));

        if (prestamo.isDevuelto()) {
            throw new IllegalArgumentException("El pr√©stamo ya ha sido devuelto y no puede ser renovado.");
        }

        // üîÑ Extender la fecha de devoluci√≥n en 7 d√≠as
        LocalDate nuevaFechaDevolucion = (prestamo.getFechaDevolucion() != null)
                ? prestamo.getFechaDevolucion().plusDays(7) // Si ya hay fecha, agregar 7 d√≠as m√°s
                : LocalDate.now().plusDays(7); // Si no tiene fecha, asignar una nueva en 7 d√≠as

        prestamo.setFechaDevolucion(nuevaFechaDevolucion);
        prestamoRepository.save(prestamo);

        System.out.println("‚úÖ Pr√©stamo renovado. Nueva fecha de devoluci√≥n: " + nuevaFechaDevolucion);
    }



    // üîπ Marcar un pr√©stamo como devuelto
    public void devolverPrestamo(Long id) {
        Prestamo prestamo = prestamoRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Pr√©stamo no encontrado con ID: " + id));

        if (prestamo.isDevuelto()) {
            throw new IllegalArgumentException("El pr√©stamo ya ha sido devuelto.");
        }

        prestamo.setFechaDevolucion(LocalDate.now());
        prestamo.setDevuelto(true);
        prestamoRepository.save(prestamo);
    }

    private String obtenerTituloColeccion(Long coleccionId, String token) {
        try {
            String url = "http://localhost:9092/colecciones/user/" + coleccionId;

            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", token); // ‚úÖ Agregar token en la cabecera
            headers.set("Content-Type", "application/json");

            HttpEntity<Void> requestEntity = new HttpEntity<>(headers);

            ResponseEntity<ColeccionResponse> response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, ColeccionResponse.class);

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                return response.getBody().getTitulo();
            } else {
                System.out.println("‚ùå No se encontr√≥ el t√≠tulo para coleccionId: " + coleccionId);
                return "T√≠tulo desconocido";
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error al obtener t√≠tulo de coleccionId: " + coleccionId + " - " + e.getMessage());
            return "T√≠tulo desconocido";
        }
    }

    // üîπ Marcar un pr√©stamo como devuelto (solo ADMIN)
    public void marcarComoDevuelto(Long id) {
        Prestamo prestamo = prestamoRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Pr√©stamo no encontrado con ID: " + id));

        if (prestamo.isDevuelto()) {
            throw new IllegalArgumentException("El pr√©stamo ya ha sido devuelto.");
        }

        prestamo.setFechaDevolucion(LocalDate.now());
        prestamo.setDevuelto(true);
        prestamoRepository.save(prestamo);

        System.out.println("‚úÖ Pr√©stamo con ID " + id + " marcado como devuelto.");
    }




    // üîπ Convertir entidad Prestamo a PrestamoResponse
    private PrestamoResponse toResponse(Prestamo prestamo, String token) {
        PrestamoResponse response = new PrestamoResponse();
        response.setId(prestamo.getId());
        response.setUsuarioId(prestamo.getUsuarioId());
        response.setColeccionId(prestamo.getColeccionId());
        response.setFechaPrestamo(prestamo.getFechaPrestamo());
        response.setFechaDevolucion(prestamo.getFechaDevolucion());
        response.setDevuelto(prestamo.isDevuelto());

        // üîπ Obtener t√≠tulo de la colecci√≥n desde `colecciones-service` con autenticaci√≥n
        response.setTituloColeccion(obtenerTituloColeccion(prestamo.getColeccionId(), token));

        response.setNombreUsuario(null);

        return response;
    }
}